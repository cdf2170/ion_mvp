"""Add API management tables

Revision ID: c8bed965152a
Revises: 001
Create Date: 2025-09-15 20:06:19.751439

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'c8bed965152a'
down_revision = '001'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create enum types first
    devicestatusenum = postgresql.ENUM('CONNECTED', 'DISCONNECTED', 'UNKNOWN', name='devicestatusenum')
    devicestatusenum.create(op.get_bind())
    op.create_table('api_connections',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('provider', sa.Enum('OKTA', 'WORKDAY', 'CROWDSTRIKE', 'CYBERARK', 'SPLUNK', 'SAILPOINT', 'MICROSOFT_365', 'AZURE_AD', 'AWS_IAM', 'GOOGLE_WORKSPACE', 'SLACK', 'JIRA', 'CONFLUENCE', 'SERVICENOW', 'PING_IDENTITY', 'CUSTOM', name='apiproviderenum'), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('base_url', sa.String(), nullable=False),
    sa.Column('api_version', sa.String(), nullable=True),
    sa.Column('authentication_type', sa.String(), nullable=False),
    sa.Column('credentials', sa.Text(), nullable=True),
    sa.Column('sync_enabled', sa.Boolean(), nullable=False),
    sa.Column('sync_interval_minutes', sa.String(), nullable=True),
    sa.Column('last_sync', sa.DateTime(timezone=True), nullable=True),
    sa.Column('next_sync', sa.DateTime(timezone=True), nullable=True),
    sa.Column('status', sa.Enum('CONNECTED', 'DISCONNECTED', 'ERROR', 'TESTING', 'DISABLED', 'AUTHENTICATING', 'RATE_LIMITED', 'MAINTENANCE', name='apiconnectionstatusenum'), nullable=False),
    sa.Column('last_health_check', sa.DateTime(timezone=True), nullable=True),
    sa.Column('health_check_message', sa.Text(), nullable=True),
    sa.Column('connection_test_url', sa.String(), nullable=True),
    sa.Column('rate_limit_requests', sa.String(), nullable=True),
    sa.Column('rate_limit_window', sa.String(), nullable=True),
    sa.Column('field_mappings', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('created_by', sa.String(), nullable=True),
    sa.Column('updated_by', sa.String(), nullable=True),
    sa.Column('supports_users', sa.Boolean(), nullable=True),
    sa.Column('supports_devices', sa.Boolean(), nullable=True),
    sa.Column('supports_groups', sa.Boolean(), nullable=True),
    sa.Column('supports_realtime', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('config_history',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('entity_type', sa.String(), nullable=False),
    sa.Column('entity_id', sa.UUID(), nullable=False),
    sa.Column('change_type', sa.Enum('CREATED', 'UPDATED', 'DELETED', 'ENABLED', 'DISABLED', name='configchangetypeenum'), nullable=False),
    sa.Column('field_name', sa.String(), nullable=True),
    sa.Column('old_value', sa.Text(), nullable=True),
    sa.Column('new_value', sa.Text(), nullable=True),
    sa.Column('changed_by', sa.String(), nullable=True),
    sa.Column('changed_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('policies',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('policy_type', sa.Enum('ACCESS_CONTROL', 'PASSWORD_POLICY', 'DEVICE_COMPLIANCE', 'DATA_CLASSIFICATION', 'NETWORK_SECURITY', 'BACKUP_RETENTION', name='policytypeenum'), nullable=False),
    sa.Column('severity', sa.Enum('LOW', 'MEDIUM', 'HIGH', 'CRITICAL', name='policyseverityenum'), nullable=False),
    sa.Column('enabled', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('created_by', sa.String(), nullable=True),
    sa.Column('configuration', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('api_connection_tags',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('connection_id', sa.UUID(), nullable=False),
    sa.Column('tag', sa.Enum('PRODUCTION', 'STAGING', 'DEVELOPMENT', 'TESTING', 'CRITICAL', 'NON_CRITICAL', 'REAL_TIME', 'BATCH_ONLY', 'HIGH_VOLUME', 'LOW_VOLUME', 'IDENTITY_SOURCE', 'DEVICE_SOURCE', 'SECURITY_TOOL', 'HR_SYSTEM', 'IT_SYSTEM', name='apiconnectiontagenum'), nullable=False),
    sa.ForeignKeyConstraint(['connection_id'], ['api_connections.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('api_sync_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('connection_id', sa.UUID(), nullable=False),
    sa.Column('sync_type', sa.String(), nullable=False),
    sa.Column('started_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('duration_seconds', sa.String(), nullable=True),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('records_processed', sa.String(), nullable=True),
    sa.Column('records_created', sa.String(), nullable=True),
    sa.Column('records_updated', sa.String(), nullable=True),
    sa.Column('records_failed', sa.String(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('error_details', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['connection_id'], ['api_connections.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('activity_history',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_cid', sa.UUID(), nullable=True),
    sa.Column('device_id', sa.UUID(), nullable=True),
    sa.Column('activity_type', sa.Enum('LOGIN', 'LOGOUT', 'ACCESS_GRANTED', 'ACCESS_DENIED', 'POLICY_VIOLATION', 'DEVICE_CONNECTED', 'DEVICE_DISCONNECTED', 'COMPLIANCE_SCAN', 'DATA_ACCESS', 'CONFIGURATION_CHANGE', name='activitytypeenum'), nullable=False),
    sa.Column('source_system', sa.String(), nullable=True),
    sa.Column('source_ip', postgresql.INET(), nullable=True),
    sa.Column('user_agent', sa.String(), nullable=True),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('activity_metadata', sa.Text(), nullable=True),
    sa.Column('risk_score', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['device_id'], ['devices.id'], ),
    sa.ForeignKeyConstraint(['user_cid'], ['canonical_identities.cid'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('device_tags',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('device_id', sa.UUID(), nullable=False),
    sa.Column('tag', sa.Enum('REMOTE', 'ON_SITE', 'EXECUTIVE', 'SLT', 'FULL_TIME', 'CONTRACT', 'BYOD', 'CORPORATE', 'VIP', 'TESTING', 'PRODUCTION', name='devicetagenum'), nullable=False),
    sa.ForeignKeyConstraint(['device_id'], ['devices.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.add_column('devices', sa.Column('ip_address', postgresql.INET(), nullable=True))
    op.add_column('devices', sa.Column('mac_address', sa.String(length=17), nullable=True))
    op.add_column('devices', sa.Column('vlan', sa.String(), nullable=True))
    op.add_column('devices', sa.Column('os_version', sa.String(), nullable=True))
    op.add_column('devices', sa.Column('last_check_in', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True))
    # Add status column as nullable first
    op.add_column('devices', sa.Column('status', sa.Enum('CONNECTED', 'DISCONNECTED', 'UNKNOWN', name='devicestatusenum'), nullable=True))
    
    # Update existing devices to have default status
    op.execute("UPDATE devices SET status = 'UNKNOWN' WHERE status IS NULL")
    
    # Now make it NOT NULL
    op.alter_column('devices', 'status', nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('devices', 'status')
    op.drop_column('devices', 'last_check_in')
    op.drop_column('devices', 'os_version')
    op.drop_column('devices', 'vlan')
    op.drop_column('devices', 'mac_address')
    op.drop_column('devices', 'ip_address')
    op.drop_table('device_tags')
    op.drop_table('activity_history')
    op.drop_table('api_sync_logs')
    op.drop_table('api_connection_tags')
    op.drop_table('policies')
    op.drop_table('config_history')
    op.drop_table('api_connections')
    
    # Drop enum types
    postgresql.ENUM(name='devicestatusenum').drop(op.get_bind())
    # ### end Alembic commands ###
